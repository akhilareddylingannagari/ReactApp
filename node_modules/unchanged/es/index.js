// external dependencies
import { __, curry } from 'curriable'; // utils

import { callIfFunction, callNestedProperty, getDeepClone, getMergedObject, getNestedProperty, getNewEmptyObject, hasNestedProperty, isArray, isCloneable, isEmptyPath, splice } from './utils';
export { __ };
/**
 * @function assign
 *
 * @description
 * get the shallowly-merged object at path
 *
 * @param {Array<number|string>|null|number|string} path the path to match on the object
 * @param {Array<*>|Object} objectToAssign the object to merge
 * @param {Array<*>|Object} object the object to merge with
 * @returns {Array<*>|Object} the new merged object
 */

export var assign = curry(function (path, objectToAssign, object) {
  if (!isCloneable(object)) {
    return objectToAssign;
  }

  return isEmptyPath(path) ? getMergedObject(object, objectToAssign, false) : getDeepClone(path, object, function (ref, key) {
    ref[key] = getMergedObject(ref[key], objectToAssign, false);
  });
});
/**
 * @function call
 *
 * @description
 * call a nested method at the path requested with the parameters provided
 *
 * @param {Array<number|string>|null|number|string} path the path to get the value at
 * @param {Array<*>} parameters the parameters to call the method with
 * @param {Array<*>|Object} object the object to call the method from
 * @param {*} context the context to set as "this" in the function call
 */

export var call = curry(function (path, parameters, object, context) {
  if (context === void 0) {
    context = object;
  }

  return isEmptyPath(path) ? callIfFunction(object, context, parameters) : callNestedProperty(path, context, parameters, object);
}, // eslint-disable-next-line no-magic-numbers
3);
/**
 * @function get
 *
 * @description
 * get the value to the object at the path requested
 *
 * @param {Array<number|string>|null|number|string} path the path to get the value at
 * @param {Array<*>|Object} object the object to get the value from
 * @returns {*} the value requested
 */

export var get = curry(function (path, object) {
  return isEmptyPath(path) ? object : getNestedProperty(path, object);
});
/**
 * @function getOr
 *
 * @description
 * get the value to the object at the path requested, or noMatchValue if nothing
 * is there.
 *
 * @param {*} noMatchValue the fallback value if nothing is found at the given path
 * @param {Array<number|string>|null|number|string} path the path to get the value at
 * @param {Array<*>|Object} object the object to get the value from
 * @returns {*} the value requested
 */

export var getOr = curry(function (noMatchValue, path, object) {
  return isEmptyPath(path) ? object : getNestedProperty(path, object, noMatchValue);
});
/**
 * @function has
 *
 * @description
 * does the nested path exist on the object
 *
 * @param {Array<number|string>|null|number|string} path the path to match on the object
 * @param {Array<*>|Object} object the object to get the value from
 * @returns {boolean} does the path exist
 */

/* eslint-disable eqeqeq */

export var has = curry(function (path, object) {
  return isEmptyPath(path) ? object != null : hasNestedProperty(path, object);
});
/* eslint-enable */

/**
 * @function merge
 *
 * @description
 * get the deeply-merged object at path
 *
 * @param {Array<number|string>|null|number|string} path the path to match on the object
 * @param {Array<*>|Object} objectToMerge the object to merge
 * @param {Array<*>|Object} object the object to merge with
 * @returns {Array<*>|Object} the new merged object
 */

export var merge = curry(function (path, objectToMerge, object) {
  if (!isCloneable(object)) {
    return objectToMerge;
  }

  return isEmptyPath(path) ? getMergedObject(object, objectToMerge, true) : getDeepClone(path, object, function (ref, key) {
    ref[key] = getMergedObject(ref[key], objectToMerge, true);
  });
});
/**
 * @function removeobject with quoted keys
 *
 * @description
 * remove the value in the object at the path requested
 *
 * @param {Array<number|string>|number|string} path the path to remove the value at
 * @param {Array<*>|Object} object the object to remove the value from
 * @returns {Array<*>|Object} a new object with the same structure and the value removed
 */

export var remove = curry(function (path, object) {
  if (isEmptyPath(path)) {
    return getNewEmptyObject(object);
  }

  return hasNestedProperty(path, object) ? getDeepClone(path, object, function (ref, key) {
    if (isArray(ref)) {
      splice(ref, key);
    } else {
      delete ref[key];
    }
  }) : object;
});
/**
 * @function set
 *
 * @description
 * set the value in the object at the path requested
 *
 * @param {Array<number|string>|number|string} path the path to set the value at
 * @param {*} value the value to set
 * @param {Array<*>|Object} object the object to set the value in
 * @returns {Array<*>|Object} a new object with the same structure and the value assigned
 */

export var set = curry(function (path, value, object) {
  return isEmptyPath(path) ? value : getDeepClone(path, object, function (ref, key) {
    ref[key] = value;
  });
});
/**
 * @function transform
 *
 * @description
 * perform same operation as set, but using a callback function that receives
 * the value (and additional parameters, if provided) to get the value to set
 *
 * @param {Array<number|string>|number|string} path the path to set the value at
 * @param {function} fn the function to transform the retrieved value with
 * @param {Array<*>|Object} object the object to set the value in
 * @param {...Array<any>} extraArgs additional arguments to pass to the transform function
 * @returns {Array<*>|Object} a new object with the same structure and the value assigned
 */

export var transform = curry(function (path, fn, object) {
  for (var _len = arguments.length, extraArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    extraArgs[_key - 3] = arguments[_key];
  }

  return isEmptyPath(path) ? fn.apply(void 0, [object].concat(extraArgs)) : getDeepClone(path, object, function (ref, key) {
    return ref[key] = fn.apply(void 0, [ref[key]].concat(extraArgs));
  });
}, // eslint-disable-next-line no-magic-numbers
3);
/**
 * @function add
 *
 * @description
 * add the value to the object at the path requested
 *
 * @param {Array<number|string>|null|number|string} path the path to assign the value at
 * @param {*} value the value to assign
 * @param {Array<*>|Object} object the object to assignobject the value in
 * @returns {Array<*>|Object} a new object with the same structure and the value added
 */

export var add = curry(function (path, value, object) {
  var isPathEmpty = isEmptyPath(path);
  var valueAtPath = isPathEmpty ? object : getNestedProperty(path, object);
  var fullPath = isArray(valueAtPath) ? isArray(path) ? path.concat([valueAtPath.length]) : (isPathEmpty ? '' : path) + "[" + valueAtPath.length + "]" : path;
  return set(fullPath, value, object);
});