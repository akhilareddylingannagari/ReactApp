'use strict';

exports.__esModule = true;

var _ChartConfig = require('./classes/ChartConfig');

var _ChartConfig2 = _interopRequireDefault(_ChartConfig);

var _OptionsConfig = require('./classes/OptionsConfig');

var _OptionsConfig2 = _interopRequireDefault(_OptionsConfig);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @module buildConfig
 */

/**
 * @function buildConfig
 *
 * @description
 * create a configuration builder class
 *
 * @example
 * import buildConfig from 'highcharts-config';
 *
 * const config = buildConfig()
 *   .addType('line', {
 *     data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],
 *     name: 'Stuff'
 *   })
 *   .get();
 *
 * console.log(config);
 * // {series: [{data: [...], name: 'Stuff', type: 'line'}]}
 *
 * @param {Object} [config={}] configuration to assign
 * @param {Object} [options={}] additional options for the configuration class
 * @returns {ChartConfig} the configuration class for a given chart
 */
var buildConfig = (0, _utils.createBuildConfig)(_ChartConfig2.default);

/**
 * @function buildConfig.addChartMethod
 *
 * @description
 * add a custom method to the chart config builder
 *
 * @param {string} methodName name of the custom method
 * @param {function} method method to execute in the chain
 * @returns {function} constructor to add method to
 */


// utils
// classes
buildConfig.addChartMethod = (0, _utils.createAddMethod)(_ChartConfig2.default, buildConfig);

/**
 * @function buildConfig.addOptionsMethod
 *
 * @description
 * add a custom method to the options config builder
 *
 * @param {string} methodName name of the custom method
 * @param {function} method method to execute in the chain
 * @returns {function} constructor to add method to
 */
buildConfig.addOptionsMethod = (0, _utils.createAddMethod)(_OptionsConfig2.default, buildConfig);

/**
 * @function buildConfig.chart
 *
 * @description
 * create a configuration builder class for charts
 *
 * @example
 * import buildConfig from 'highcharts-config';
 *
 * const config = buildConfig()
 *   .addType('line', {
 *     data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6],
 *     name: 'Stuff'
 *   })
 *   .get();
 *
 * console.log(config);
 * // {series: [{data: [...], name: 'Stuff', type: 'line'}]}
 *
 * @param {Object} [config={}] configuration to assign
 * @param {Object} [options={}] additional options for the configuration class
 * @returns {ChartConfig} the configuration class for a given chart
 */
buildConfig.chart = (0, _utils.createBuildConfig)(_ChartConfig2.default);

/**
 * @function buildConfig.options
 *
 * @description
 * create a configuration builder class for options
 *
 * @param {Object} [config={}] configuration to assign
 * @param {Object} [options={}] additional options for the configuration class
 * @returns {OptionsConfig} the configuration class for options
 */
buildConfig.options = (0, _utils.createBuildConfig)(_OptionsConfig2.default);

exports.default = buildConfig;