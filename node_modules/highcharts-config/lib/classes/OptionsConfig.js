'use strict';

exports.__esModule = true;

var _Config2 = require('./Config');

var _Config3 = _interopRequireDefault(_Config2);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // classes


// constants


/**
 * @module classes/OptionsConfig
 */

/**
 * @private
 *
 * @class OptionsConfig
 * @classdesc configuration object builder for global options
 */
var OptionsConfig = function (_Config) {
  _inherits(OptionsConfig, _Config);

  function OptionsConfig() {
    _classCallCheck(this, OptionsConfig);

    return _possibleConstructorReturn(this, _Config.apply(this, arguments));
  }

  return OptionsConfig;
}(_Config3.default);

_constants.OPTIONS_CONVENIENCE_METHOD_NAMES.forEach(OptionsConfig.addMethod(OptionsConfig));

exports.default = OptionsConfig;